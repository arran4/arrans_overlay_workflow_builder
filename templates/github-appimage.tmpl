# Generated using: https://github.com/arran4/arrans_overlay_workflow_builder [[.Type]] [[.ConfigFile]] [[.Now]]

name: [[ .WorkflowName ]]

permissions:
  contents: write

on:
  schedule:
    - cron: '[[ .Cron ]]'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/[[ .WorkflowFileName ]]'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ecn: [[ .Category ]]
  epn: [[ .PackageName ]]
  description: "[[ .Description ]]"
  homepage: "[[ .Homepage ]]"
  github_owner: [[ .GithubOwner ]]
  github_repo: [[ .GithubRepo ]]
  keywords: [[ .MaskedKeywords ]]
  workflow_filename: [[ .WorkflowFileName ]]
  [[- range $pname, $prog := .Programs ]]
  [[- if $prog.HasDesktopFile ]]
  [[ join (filterEmpty $pname "desktop_file" ) "_" ]]: '[[ $prog.DesktopFile ]]'
  [[- end ]]
  [[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]]: '[[ $prog.InstalledFilename ]]'
  [[- if $prog.IsArchived ]]
  [[- range $keyword, $archive := $prog.ArchiveFilename ]]
  [[ join (filterEmpty $pname "appimage_archived_name" $keyword) "_" ]]: '[[ $archive ]]'
  [[- end ]]
  [[- end ]]
  [[- range $keyword, $release := $prog.ReleasesFilename ]]
  [[ join (filterEmpty $pname "release_name" $keyword) "_" ]]: '[[ $release ]]'
  [[- end ]]
  [[- end ]]

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
            sudo apt-get update
            sudo apt-get install -y wget jq coreutils
            url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
            echo "$url"
            wget "${url}" -O /tmp/g2.deb
            sudo dpkg -i /tmp/g2.deb
            rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          mkdir -p $ebuild_dir
          tags=$(curl -s  --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/${{ env.github_owner }}/${{ env.github_repo }}/releases | jq -r '.[].tag_name')
          for tag in $tags; do
            version="${tag#v}"
            if [ "${version}" = "${tag}" ]; then
                echo "$version == $tag so there is no V removed skipping"
                continue
            fi
            if ! echo "$version" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((_)(alpha|beta|rc|p)[0-9]*)*$'; then
                echo "tag / $version doesn't match regexp";
                continue; 
            fi
            ebuild_file="${ebuild_dir}/${{ env.epn }}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then

              {
                echo '# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/${{ env.workflow_filename }}'
                echo 'EAPI=8'
                echo "DESCRIPTION=\"${{ env.description }}\""
                echo "HOMEPAGE=\"${{ env.homepage }}\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="${{ env.keywords }}"'
                echo 'IUSE=""'
                echo 'DEPEND=""'
                echo 'RDEPEND=""'
                echo 'S="${WORKDIR}"'
                echo 'RESTRICT="strip"'
[[- if .HasDesktopFile ]]
                echo ''
                echo "inherit xdg-utils"
[[- end ]]
                echo ''
                echo 'SRC_URI="'
[[- range $releaseFilename, $externalResource := .ExternalResources ]]
                echo "  [[ $externalResource.Keyword ]]? ( https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/[[ $releaseFilename ]] -> \${P}-[[ $releaseFilename ]] )"
[[- end ]]
                echo '"'
                echo ''
                echo 'src_unpack() {'
[[- range $releaseFilename, $externalResource := .ExternalResources ]]
                echo '  if use [[ $externalResource.Keyword ]]; then'
                echo "    unpack \"\${DISTDIR}/\${P}-[[ $releaseFilename ]]\" || die \"Can't unpack archive file\""
                echo '  fi'
[[- end ]]
[[- range $pname, $prog := .Programs ]]
[[- if .IsArchived ]]
  [[- range $keyword, $archive := $prog.ArchiveFilename ]]
                echo '  if use [[ $keyword ]]; then'
                echo '    mv "${DESTDIR}/${{ env.[[ join (filterEmpty $pname "appimage_archived_name" ) "_" ]] }}" "${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }}"  || die "Can'\''t move archived file"'
                echo '  fi'
  [[- end ]]
[[- else ]]
  [[- range $keyword, $release := $prog.ReleasesFilename ]]
                echo '  if use [[ $keyword ]]; then'
                echo "    cp \"\${DISTDIR}/${{ env.[[ join (filterEmpty $pname "release_name" $keyword) "_" ]] }}\" \"${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }}\"  || die \"Can't copy downloaded file\""
                echo '  fi'
  [[- end ]]
[[- end ]]
                echo '  chmod a+x "${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }}"  || die "Can'\''t chmod archive file"'
[[- if $prog.HasDesktopFile ]]
                echo '  ./${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }} --appimage-extract "${{ env.[[ join (filterEmpty $pname "desktop_file" ) "_" ]] }}" || die "Failed to extract .desktop from appimage"'
                echo '  ./${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }} --appimage-extract "usr/share/icons" || die "Failed to extract icons from app image"'
[[- end ]]
[[- end ]]
                echo '}'
                echo ''
[[- if .HasDesktopFile ]]
                echo 'src_prepare() {'
[[- range $pname, $prog := .Programs ]]
[[- if $prog.HasDesktopFile ]]
                echo "  sed -i 's:^Exec=.*:Exec=/opt/bin/${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }}:' 'squashfs-root/${{ env.[[ join (filterEmpty $pname "desktop_file" ) "_" ]] }}'"
[[- end ]]
[[- end ]]
                echo "  find squashfs-root -type f \( -name index.theme -or -name icon-theme.cache \) -exec rm {} \; "
                echo "  find squashfs-root -type d -exec rmdir -p {} \; "
                echo '  eapply_user'
                echo '}'
[[- end ]]
                echo ''
                echo 'src_install() {'
                echo '  exeinto /opt/bin'
[[- range $pname, $prog := .Programs ]]
                echo '  doexe "${{ env.[[ join (filterEmpty $pname "appimage_installed_name" ) "_" ]] }}" || die "Failed to install AppImage"'
[[- end ]]
[[- if .HasDesktopFile ]]
                echo '  insinto /usr/share/applications'
[[- range $pname, $prog := .Programs ]]
                echo '  doins "squashfs-root/${{ env.[[ join (filterEmpty $pname "desktop_file" ) "_" ]] }}" || die "Failed to install desktop file"'
[[- end ]]
                echo '  insinto /usr/share/icons'
                echo '  doins -r squashfs-root/usr/share/icons/hicolor || die "Failed to install icons"'
[[- end ]]
                echo '}'
                echo ""
[[- if .HasDesktopFile ]]
                echo "pkg_postinst() {"
                echo "  xdg_desktop_database_update"
                echo "}"
                echo ""
[[- end ]]
              } > $ebuild_file

              # Manifest generation
              [[ range $releaseFilename, $externalResource := .ExternalResources ]] 
              g2 manifest upsert-from-url "https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/[[ $releaseFilename ]]" "${{ env.epn }}-${version}-[[ $releaseFilename ]]" "${ebuild_dir}/Manifest"
              [[- end ]]
              echo "generated_tag=${tag}" >> $GITHUB_OUTPUT
            fi
            break
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${{ env.epn }} releases" &&
          git pull --rebase &&
          git push || true
        if: steps.process_releases.outputs.generated_tag != 0
