# Generated using: https://github.com/arran4/arrans_overlay_workflow_builder [[.Version]] [[.Type]] [[.ConfigFile]] [[.Now]]

name: [[ .WorkflowName ]]

permissions:
  contents: write

on:
  schedule:
    - cron: '[[ .Cron ]]'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/[[ .WorkflowFileName ]]'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ecn: [[ .Category ]]
  epn: [[ .PackageName ]]
  description: [[ .Description | quoteStr ]]
  homepage: [[ .Homepage  | quoteStr ]]
  github_owner: [[ .GithubOwner ]]
  github_repo: [[ .GithubRepo ]]
  keywords: [[ .MaskedKeywords ]]
  workflow_filename: [[ .WorkflowFileName ]]
  [[- range $pname, $prog := .Programs ]]
  [[- if $prog.HasDesktopFile ]]
  [[ join (filterEmpty $pname "desktop_file" ) "_" ]]: '[[ $prog.DesktopFile ]]'
  [[- end ]]
  [[ join (filterEmpty $pname "binary_installed_name" ) "_" ]]: '[[ $prog.InstalledFilename ]]'
  [[- range $keyword, $binary := $prog.Binary ]]
  [[- if gt (len $binary) 2 ]]
  [[ join (filterEmpty $pname "binary_archived_name" $keyword) "_" ]]: '[[ index $binary 1 ]]'
  [[- end ]]
  [[ join (filterEmpty $pname "release_name" $keyword) "_" ]]: '[[ index $binary 0 | ebuildvardoublequoted ]]'
  [[- end ]]
  [[- end ]]

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
            sudo apt-get update
            sudo apt-get install -y wget jq coreutils
            url="$(curl -s --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/arran4/g2/releases/latest | jq -r '.assets[].browser_download_url | select(endswith("_linux_amd64.deb"))')"
            echo "$url"
            wget "${url}" -O /tmp/g2.deb
            sudo dpkg -i /tmp/g2.deb
            rm /tmp/g2.deb

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          mkdir -p $ebuild_dir
          declare -A releaseTypes=()
          tags=$(curl -s  --header "Accept: application/vnd.github+json" --header "Authorization: Bearer ${{secrets.GITHUB_TOKEN}}" https://api.github.com/repos/${{ env.github_owner }}/${{ env.github_repo }}/releases | jq -r '.[].tag_name')
[[- if .WorkaroundSemanticVersionWithoutV ]]
          for tag in $tags; do
            version="${tag}"
[[- else ]]
          for tag in $tags; do
            version="${tag#[[- .WorkaroundTagPrefix ]]v}"
            if [ "${version}" = "${tag}" ]; then
                echo "$version == $tag so there is no [[- .WorkaroundTagPrefix ]] v removed skipping"
                continue
            fi
[[- end ]]
            originalVersion="${version}"
[[- if .WorkaroundSemanticVersionPrereleaseHack1 ]]
            version="$(echo "${version}" | sed 's/^\([0-9]\+\(\.[0-9]\+\)*\)\(-r[0-9]*\)\?\([-_]\(alpha\|beta\|rc\|p\)[0-9]*\)$/\1_\5\3/')"
[[- end ]]
            if ! echo "${version}" | egrep '^([0-9]+)\.([0-9]+)(\.([0-9]+))?(-r[0-9]+)?((_)(alpha|beta|rc|p)[0-9]*)*$'; then
                echo "tag / $version doesn't match regexp";
                continue;
            fi
            releaseType="$(echo "${version}" | sed -n 's/^[^_]\+_\(alpha\|beta\|rc\|p[0-9]*\).*$/\1/p')"
            if [[`[[ ! -v releaseTypes[${releaseType:=release}] ]]`]]; then
                if [[`[[ -v releaseTypes[release] ]]`]]; then
                  echo "Already have a newer main release: ${releaseTypes[release]}"
                  continue
                fi
                releaseTypes[${releaseType:=release}]="${version}"
            else
                echo "Already have a newer ${releaseType:=release} release: ${releaseTypes[${releaseType:=release}]}"
                continue
            fi
            ebuild_file="${ebuild_dir}/${{ env.epn }}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then

              {
                echo '# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/${{ env.workflow_filename }}'
                echo 'EAPI=8'
                echo "DESCRIPTION=\"${{ env.description }}\""
                echo "HOMEPAGE=\"${{ env.homepage }}\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="${{ env.keywords }}"'
                echo 'IUSE="[[- `` -]]
                        [[- range $use, $archs := $.ReverseProgramsAsAlternatives]] [[$use]][[end]]
                        [[- if $.HasManualPages ]] man[[end]]
                        [[- if $.HasDocuments ]] doc[[end]]
                        [[- range $i, $shell := $.ShellCompletionShells]] [[$shell]][[end]]
                    [[- `` -]]"'
                echo 'REQUIRED_USE="[[- `` -]]
                    [[- range $use, $archs := $.ReverseProgramsAsAlternatives]][[$use]]? ( || ( [[range $i, $arch := $archs]][[$arch]] [[end]] ) ) [[end]]
                    [[- `` -]]"'
                echo 'DEPEND=""'
                echo 'RDEPEND="[[range $i, $dep := .MainDependencies]][[$dep]] [[end]]
[[- range $prog, $deps := .AlternativeDependencies]][[ if gt (len $deps) 0 ]][[$prog]]? ( [[range $i, $dep := $deps]][[$dep]] [[end]] ) [[end]][[end -]]
                     "'
                echo 'S="${WORKDIR}"'
                echo ''
[[- if .HasDesktopFile ]]
                echo ''
[[- end ]]
                echo ''
                echo 'SRC_URI="'
[[- range $i, $externalResource := .ExternalResources ]]
                echo "  [[range $i, $uf := .MustHaveUseFlags]][[ $uf ]]? ( [[end]][[range $i, $uf := .MustntHaveUseFlags]]![[ $uf ]]? ( [[end]] https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/[[- if $.WorkaroundSemanticVersionPrereleaseHack1 ]][[ $externalResource.ReleaseFilename | ebuildvardoublequotedSemanticVersionPrereleaseHack1 ]][[- else ]][[ $externalResource.ReleaseFilename | ebuildvardoublequoted ]][[- end ]] -> \${P}-[[ $externalResource.ReleaseFilename  | ebuildvardoublequoted ]] [[range $i, $uf := .MustHaveUseFlags]] ) [[end]][[range $i, $uf := .MustntHaveUseFlags]] ) [[ end ]] "
[[- end ]]
                echo '"'
                echo ''
                echo 'src_unpack() {'
[[- range $i, $externalResource := .ExternalResources ]]
  [[- if $externalResource.Archived ]]
    [[- $count := 0 ]]
                echo '  if [[range $i, $uf := .MustHaveUseFlags]][[ if gt $count 0]] && [[ end ]][[ $count = 1]]use [[ $uf ]][[end]][[range $i, $uf := .MustntHaveUseFlags]][[ if gt $count 0]] && [[ end ]][[ $count = 1]]! use [[ $uf ]] [[end]]; then'
                echo "    unpack \"\${DISTDIR}/\${P}-[[ $externalResource.ReleaseFilename | ebuildvardoublequoted ]]\" || die \"Can't unpack archive file\""
                echo '  fi'
  [[- end ]]
[[- end ]]
[[- if $.HasCompressedManualPages ]]
                echo '  if use man; then'
    [[- range $i, $mans := $.CompressedManualPages ]]
        [[- if ne $mans.Keyword "" ]]
                echo '    if use [[ $mans.Keyword ]]; then'
            [[- range $i, $man := $mans.Grouped ]]
                echo '      [[ $man.Decompressor ]] "[[ $man.SourceFilepath ]]" || die "Failed to decompress manual page [[ $man.DestinationFilename ]]"'
            [[- end ]]
                echo '    fi'
        [[- else ]]
            [[- range $i, $man := $mans.Grouped ]]
                echo '    [[ $man.Decompressor ]] "[[ $man.SourceFilepath ]]" || die "Failed to decompress manual page [[ $man.DestinationFilename ]]"'
            [[- end ]]
        [[- end ]]
    [[- end ]]
                echo '  fi'
[[- end ]]
                echo '}'
                echo ''
                echo 'src_install() {'
                echo '  exeinto /opt/bin'

[[- range $pname, $prog := .Programs ]]
  [[- range $keyword, $binary := $prog.Binary ]]
    [[- if gt (len $binary) 2 ]]
        [[- $count := 0 ]]
                echo '  if [[range $i, $uf := $.GetMustHaveUseFlags $pname $keyword ]][[ if gt $count 0]] && [[ end ]][[ $count = 1]]use [[ $uf ]][[end]][[range $i, $uf := $.GetMustntHaveUseFlags $pname $keyword ]][[ if gt $count 0]] && [[ end ]][[ $count = 1]]! use [[ $uf ]] [[end]]; then'
                echo '    newexe "${{ env.[[ join (filterEmpty $pname "binary_archived_name" $keyword) "_" ]] }}" "${{ env.[[ join (filterEmpty $pname "binary_installed_name" ) "_" ]] }}" || die "Failed to install Binary"'
                echo '  fi'
    [[- else ]]
        [[- $count := 0 ]]
                echo '  if [[range $i, $uf := $.GetMustHaveUseFlags $pname $keyword ]][[ if gt $count 0]] && [[ end ]][[ $count = 1]]use [[ $uf ]][[end]][[range $i, $uf := $.GetMustntHaveUseFlags $pname $keyword ]][[ if gt $count 0]] && [[ end ]][[ $count = 1]]! use [[ $uf ]] [[end]]; then'
                echo '    newexe "${DISTDIR}/${P}-${{ env.[[ join (filterEmpty $pname "release_name" $keyword) "_" ]] }}" "${{ env.[[ join (filterEmpty $pname "binary_installed_name" ) "_" ]] }}" || die "Failed to install Binary"'
                echo '  fi'
    [[- end ]]
  [[- end ]]
[[- end ]]


[[- range $i, $shell := $.ShellCompletionShells]]
                echo '  if use [[ $shell ]]; then'
                echo '    insinto "[[ $.ShellCompletionInstallPath $shell ]]"'
    [[- range $i, $files := $.ShellCompletion $shell ]]
        [[- if ne $files.Keyword "" ]]
                echo '    if use [[ $files.Keyword ]]; then'
            [[- range $i, $file := $files.Grouped ]]
                echo '      newins "[[ $file.SourceFilepath ]]" "[[ $file.DestinationFilename ]]" || die "Failed to bash completion file"'
            [[- end ]]
                echo '    fi'
        [[- else ]]
            [[- range $i, $file := $files.Grouped ]]
                echo '    newins "[[ $file.SourceFilepath ]]" "[[ $file.DestinationFilename ]]" || die "Failed to bash completion file"'
            [[- end ]]
        [[- end ]]
    [[- end ]]
                echo '  fi'
[[- end ]]
[[- if $.HasManualPages ]]
                echo '  if use man; then'
    [[- range $i, $mans := $.ManualPages ]]
        [[- if ne $mans.Keyword "" ]]
                echo '    if use [[ $mans.Keyword ]]; then'
            [[- range $i, $man := $mans.Grouped ]]
                echo '      newman "[[ $man.UncompressedSourceFilepath ]]" "[[ $man.DestinationFilename ]]" || die "Failed to install manual page [[ $man.DestinationFilename ]]"'
            [[- end ]]
                echo '    fi'
        [[- else ]]
            [[- range $i, $man := $mans.Grouped ]]
                echo '    newman "[[ $man.UncompressedSourceFilepath ]]" "[[ $man.DestinationFilename ]]" || die "Failed to install manual page [[ $man.DestinationFilename ]]"'
            [[- end ]]
        [[- end ]]
    [[- end ]]
                echo '  fi'
[[- end ]]
[[- if $.HasDocuments ]]
                echo '  if use doc; then'
    [[- range $i, $docs := $.Documents ]]
        [[- if ne $docs.Keyword "" ]]
                echo '    if use [[ $docs.Keyword ]]; then'
            [[- range $ii, $doc := $docs.Grouped ]]
                echo '      newdoc "[[ $doc.SourceFilepath ]]" "[[ $doc.DestinationFilename ]]" || die "Failed to install document [[ $doc.DestinationFilename ]]"'
            [[- end ]]
                echo '    fi'
        [[- else ]]
            [[- range $ii, $doc := $docs.Grouped ]]
                echo '    newdoc "[[ $doc.SourceFilepath ]]" "[[ $doc.DestinationFilename ]]" || die "Failed to install document [[ $doc.DestinationFilename ]]"'
            [[- end ]]
        [[- end ]]
    [[- end ]]
                echo '  fi'
[[- end ]]
                echo '}'
                echo ""
              } > $ebuild_file

              # Manifest generation
[[ range $i, $externalResource := .ExternalResources ]]
    [[- if $.WorkaroundSemanticVersionPrereleaseHack1 ]]
              g2 manifest upsert-from-url "https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/[[ $externalResource.ReleaseFilename | ebuildvardoublequotedSemanticVersionPrereleaseHack1 ]]" "${{ env.epn }}-${version}-[[ $externalResource.ReleaseFilename | actionvardoublequoted ]]" "${ebuild_dir}/Manifest"
    [[- else ]]
              g2 manifest upsert-from-url "https://github.com/${{ env.github_owner }}/${{ env.github_repo }}/releases/download/${tag}/[[ $externalResource.ReleaseFilename | actionvardoublequoted ]]" "${{ env.epn }}-${version}-[[ $externalResource.ReleaseFilename | actionvardoublequoted ]]" "${ebuild_dir}/Manifest"
    [[- end ]]

[[- end ]]
              echo "generated_tag=${tag}" >> $GITHUB_OUTPUT
            fi
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${{ env.epn }} releases tag ${generated_tag}" &&
          git pull --rebase &&
          git push || true
        if: steps.process_releases.outputs.generated_tag
