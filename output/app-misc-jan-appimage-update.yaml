name: [[ .WorkflowName ]]

permissions:
  contents: write

on:
  schedule:
    - cron: '[[ .Cron ]]'
  workflow_dispatch:
  push:
    paths:
      - '.github/workflows/[[ .WorkflowFileName ]]'

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: false

env:
  ecn: [[ .Category ]]
  epn: [[ .PackageName ]]
  description: "[[ .Description ]]"
  homepage: "[[ .HomePage ]]"
  desktop_file: "[[ .DesktopFile ]]"
  appimage_installed_name: [[ .InstalledFilename ]]
  github_owner: [[ .GithubOwner ]]
  github_repo: [[ .GithubRepo ]]
  keywords: [[ .Keywords ]]
  workflow_filename: [[ .WorkflowFileName ]]

jobs:
  check-and-create-ebuild:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'

      - name: Install required tools
        run: |
          sudo apt-get update
          sudo apt-get install -y wget jq coreutils tar

      - name: Process each release
        id: process_releases
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          mkdir -p $ebuild_dir

          releases=$(curl -s https://api.github.com/repos/${{ env.github_owner }}/${{ env.github_repo }}/releases | jq -r '.[].tag_name')
          for release in $releases; do
            version="${release#v}"
            ebuild_file="${ebuild_dir}/${{ env.epn }}-${version}.ebuild"
            if [ ! -f "$ebuild_file" ]; then

              # Create ebuild script
              {
                echo '# Generated via: https://github.com/arran4/arrans_overlay/blob/main/.github/workflows/${{ env.workflow_filename }}'
                echo 'EAPI=8'
                echo "DESCRIPTION=\"${{ env.description }}\""
                echo "HOMEPAGE=\"${{ env.homepage }}\""
                echo 'LICENSE="MIT"'
                echo 'SLOT="0"'
                echo 'KEYWORDS="${{env.keywords}}"'
                echo 'IUSE=""'
                echo 'DEPEND=""'
                echo 'RDEPEND=""'
                echo 'S="${WORKDIR}"'
                echo 'RESTRICT="strip"'
                echo ''
                echo "inherit xdg-utils"
                echo ''
                echo 'SRC_URI="[[ .SrcUri ]]"'
                echo ''
                echo 'src_unpack() {'
                echo '  cp "${DISTDIR}/${A}" "${A}"  || die "Can'\''t copy archive file"'
                echo '  chmod a+x "${A}"  || die "Can'\''t chmod archive file"'
                echo "  ./\${A} --appimage-extract ${{env.desktop_file}} || die \"Failed to extract .desktop from appimage\""
                echo "  ./\${A} --appimage-extract usr/share/icons || die \"Failed to extract icons from app image\""
                echo '}'
                echo ''
                echo 'src_prepare() {'
                echo "  sed -i 's:^Exec=.*:Exec=/opt/bin/${{ env.appimage_installed_name }}:' squashfs-root/${{env.desktop_file}}"
                echo "  find squashfs-root -type f \( -name index.theme -or -name icon-theme.cache \) -exec rm {} \; "
                echo "  find squashfs-root -type d -exec rmdir -p {} \; "
                echo '  eapply_user'
                echo '}'
                echo ''
                echo 'src_install() {'
                echo '  mv "${P}.amd64" "${{ env.appimage_installed_name }}" || die "Failed to rename AppImage"'
                echo '  exeinto /opt/bin'
                echo '  doexe "${{ env.appimage_installed_name }}" || die "Failed to install AppImage"'
                echo '  insinto /usr/share/applications'
                echo '  doins squashfs-root/${{env.desktop_file}} || die "Failed to install desktop file"'
                echo '  insinto /usr/share/icons'
                echo '  doins -r squashfs-root/usr/share/icons/hicolor || die "Failed to install icons"'
                echo '}'
                echo ""
                echo "pkg_postinst() {"
                echo "  xdg_desktop_database_update"
                echo "}"
                echo ""
              } > $ebuild_file

              [[ range _, $wgetfile := .ExternalResources ]] 
              # Generate the manifest for the new ebuild: [[ $wgetfile.LocalFilename ]]
              wget [[ $wgetfile.Url ]] -O /tmp/[[ $wgetfile.LocalFilename ]]
              echo "DIST [[ $wgetfile.LocalFilename ]] $(stat -c %s "/tmp/[[ $wgetfile.LocalFilename ]]") BLAKE2B $(b2sum "/tmp/[[ $wgetfile.LocalFilename ]]" | cut -d' ' -f1) SHA512 $(sha512sum "/tmp/[[ $wgetfile.LocalFilename ]]" | cut -d' ' -f1)" | tee -a "${ebuild_dir}/Manifest"
              rm "/tmp/[[ $wgetfile.LocalFilename ]]"
              [[ end ]]
              break
            fi
          done

      - name: Commit and push changes
        run: |
          ebuild_dir="./${{ env.ecn }}/${{ env.epn }}"
          git add ./${ebuild_dir}
          git commit -m "Add ebuilds for new ${{ env.epn }} releases" &&
          git pull --rebase &&
          git push || true
        if: steps.process_releases.conclusion == 'success'
